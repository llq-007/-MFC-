
#include "pch.h"
#include "framework.h"
#include "Calculator.h"
#include "CalculatorDlg.h"
#include "afxdialogex.h"
#include<iostream>
#include<stack>
#include<string>
#include <math.h>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
using namespace std;
bool priorityJudgment(char a, char b);
double stackC(string s);
double figure(double a, double b, char c);

// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
public:
	afx_msg void On32771();
	afx_msg void On32780();
	afx_msg void OnUpdate32771(CCmdUI* pCmdUI);
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()
CMenu m_menu;
CString g_str;
// CCalculatorDlg 对话框



CCalculatorDlg::CCalculatorDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_CALCULATOR_DIALOG, pParent)
{
	//m_hIcon = AfxGetApp()->LoadIcon("IDR_ICO1");
}

void CCalculatorDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_EDIT1, m_Edit1);
	DDX_Control(pDX, IDC_EDIT2, m_Edit2);
}

BEGIN_MESSAGE_MAP(CCalculatorDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON2, &CCalculatorDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDC_BUTTON1, &CCalculatorDlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON5, &CCalculatorDlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON14, &CCalculatorDlg::OnBnClickedButton14)
	ON_BN_CLICKED(IDC_BUTTON6, &CCalculatorDlg::OnBnClickedButton6)
	ON_BN_CLICKED(IDC_BUTTON15, &CCalculatorDlg::OnBnClickedButton15)
	ON_BN_CLICKED(IDC_BUTTON16, &CCalculatorDlg::OnBnClickedButton16)
	ON_BN_CLICKED(IDC_BUTTON9, &CCalculatorDlg::OnBnClickedButton9)
	ON_BN_CLICKED(IDC_BUTTON10, &CCalculatorDlg::OnBnClickedButton10)
	ON_BN_CLICKED(IDC_BUTTON11, &CCalculatorDlg::OnBnClickedButton11)
	ON_BN_CLICKED(IDC_BUTTON13, &CCalculatorDlg::OnBnClickedButton13)
	ON_BN_CLICKED(IDC_BUTTON19, &CCalculatorDlg::OnBnClickedButton19)
	ON_BN_CLICKED(IDC_BUTTON18, &CCalculatorDlg::OnBnClickedButton18)
	ON_BN_CLICKED(IDC_BUTTON3, &CCalculatorDlg::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON8, &CCalculatorDlg::OnBnClickedButton8)
	ON_BN_CLICKED(IDC_BUTTON12, &CCalculatorDlg::OnBnClickedButton12)
	ON_BN_CLICKED(IDC_BUTTON17, &CCalculatorDlg::OnBnClickedButton17)
	ON_BN_CLICKED(IDC_BUTTON21, &CCalculatorDlg::OnBnClickedButton21)
	ON_BN_CLICKED(IDC_BUTTON20, &CCalculatorDlg::OnBnClickedButton20)
	ON_BN_CLICKED(IDC_BUTTON4, &CCalculatorDlg::OnBnClickedButton4)
	ON_COMMAND(ID_32771, &CCalculatorDlg::On32771)
	ON_COMMAND(ID_32780, &CCalculatorDlg::On32780)
END_MESSAGE_MAP()


// CCalculatorDlg 消息处理程序

BOOL CCalculatorDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。
	
	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码
	m_menu.LoadMenuW(IDR_MENU1); //IDR_MENU1是菜单资源ID
	SetMenu(&m_menu);
	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CCalculatorDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CCalculatorDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CCalculatorDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

bool priorityJudgment(char a, char b)
{
	//优先级判断如果a>b，则返回true(@为表达式结束位) 
	if (a == '+' && b == '+')
		return false;
	if (a == '+' && b == '-')
		return false;
	if (a == '+' && b == '*')
		return false;
	if (a == '+' && b == '/')
		return false;
	if (a == '+' && b == '(')
		return true;
	if (a == '-' && b == '+')
		return false;
	if (a == '-' && b == '-')
		return false;
	if (a == '-' && b == '*')
		return false;
	if (a == '-' && b == '/')
		return false;
	if (a == '-' && b == '(')
		return true;
	if (a == '*' && b == '+')
		return true;
	if (a == '*' && b == '-')
		return true;
	if (a == '*' && b == '*')
		return false;
	if (a == '*' && b == '/')
		return false;
	if (a == '*' && b == '(')
		return true;
	if (a == '/' && b == '+')
		return true;
	if (a == '/' && b == '-')
		return true;
	if (a == '/' && b == '*')
		return false;
	if (a == '/' && b == '/')
		return false;
	if (a == '/' && b == '(')
		return true;
}
double figure(double a, double b, char c)//进行符号计算 
{
	switch (c)
	{
	case'+':
		return a + b;
	case'-':
		return a - b;
	case'*':
		return a * b;
	case'/':
		return a / b;
		return 0;
	}
}
double stackC(string s)
{
	stack<char> operatorStack;
	stack<double> constantStack;
	int size = s.size();
	string keepnum = "";
	for (int i = 0; i < size; i++)
	{
		if (s[i] == '.')
		{
			//排除.和运算符一起出现的情况
			if (i == 0 || i == size - 1 || s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' || s[i - 1] == '/' || s[i - 1] == '(' || s[i - 1] == ')' || s[i + 1] == '+' || s[i + 1] == '-' || s[i + 1] == '*' || s[i + 1] == '/' || s[i + 1] == '(' || s[i + 1] == ')')
				return -1.123;
		}
		if (s[i] != '+' && s[i] != '-' && s[i] != '*' && s[i] != '/' && s[i] != '(' && s[i] != ')')
		{
			keepnum += s[i];
			//如果ch是最后一位了则直接入栈
			if (i == size - 1) {
				constantStack.push(double(std::stoi(keepnum)));//将常量压入常量栈
			}
			else {
				//判断下一个字符是不是数字，如果是继续扫描
				for (; s[i + 1] != '+' && s[i + 1] != '-' && s[i + 1] != '*' && s[i + 1] != '/' && s[i + 1] != '(' && s[i + 1] != ')' && i + 1 < size; i++)
				{
					keepnum += s[i + 1];
				}
				double d = atof(const_cast<const char*>(keepnum.c_str()));
				constantStack.push(d);
				keepnum = "";//这里一定要清空keepnum
			}
		}
		if (s[i] == '(')
		{
			if (i > 0 && s[i - 1] != '+' && s[i - 1] != '-' && s[i - 1] != '*' && s[i - 1] != '/' && s[i - 1] != '(')
				return -1.123;
			operatorStack.push(s[i]);//左括号优先级最高直接压入运算符栈
			continue;
		}
		if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')
		{
			//排除两个运算符同时出现的情况
			if (i == 0 || i == size - 1 || s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' || s[i - 1] == '/' || s[i - 1] == '(' || s[i + 1] == '+' || s[i + 1] == '-' || s[i + 1] == '*' || s[i + 1] == '/' || s[i + 1] == ')')
			{
				return -1.123;
			}

			if (operatorStack.empty())//当栈为空时直接入栈，不为空时比较优先级
			{
				operatorStack.push(s[i]);
				continue;
			}
			char temp = operatorStack.top();

			if (priorityJudgment(s[i], temp))
				operatorStack.push(s[i]);
			else 				//出栈
			{
				char c = operatorStack.top();
				operatorStack.pop();
				double a = constantStack.top();
				constantStack.pop();
				double b = constantStack.top();
				constantStack.pop();
				constantStack.push(figure(b, a, c));
				operatorStack.push(s[i]);
			}
		}
		if (s[i] == ')')
		{
			while (operatorStack.top() != '(')
			{
				char s = operatorStack.top();
				operatorStack.pop();
				double a = constantStack.top();
				constantStack.pop();
				double b = constantStack.top();
				constantStack.pop();
				constantStack.push(figure(b, a, s));
			}
			operatorStack.pop();
		}
		while (i == size - 1 && !operatorStack.empty())
		{
			int n = 0;//用来判断左右括号是否相等
			for (int i = 0; i < size; i++)
			{
				if (s[i] == '(')n++;
				if (s[i] == ')')n--;
			}
			if (n != 0)return -1.123;
			char s = operatorStack.top();
			operatorStack.pop();
			double a = constantStack.top();
			constantStack.pop();
			double b = constantStack.top();
			constantStack.pop();
			constantStack.push(figure(b, a, s));
		}
	}
	return constantStack.top();
}

void CCalculatorDlg::OnBnClickedButton14()//输出1
{
	g_str += "1";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}
void CCalculatorDlg::OnBnClickedButton2()//
{
	g_str += "(";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}

void CCalculatorDlg::OnBnClickedButton5()
{
	g_str += "7";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}

void CCalculatorDlg::OnBnClickedButton1()//输出1
{
	g_str = "";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton6()
{
	g_str += "8";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton15()
{
	g_str += "2";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton16()
{
	g_str += "3";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton9()
{
	g_str += "4";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton10()
{
	g_str += "5";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton11()
{
	g_str += "6";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton13()
{
	g_str += "9";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton19()
{
	g_str += "0";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton18()
{
	g_str += "/";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton3()
{
	g_str += ")";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton8()
{
	g_str += "*";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton12()
{
	g_str += "-";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton17()
{
	g_str += "+";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}


void CCalculatorDlg::OnBnClickedButton21()
{
	CString cs;
	GetDlgItemText(IDC_EDIT1, cs);
	g_str = "";
	m_Edit1.SetWindowText(g_str);
	m_Edit2.SetWindowText(cs); 
	std::string sz2 = CT2A(cs.GetBuffer());
	double res = stackC(sz2);
	if (res == -1.123)
	{
		CString a ;
		a = "格式错误！！！";
		m_Edit1.SetWindowText(a);
	}
	else 
	{
		CString str;
		str.Format(TEXT("%0.1f"), res,res);
		g_str = str;
		m_Edit1.SetWindowText(g_str);
	}
	// TODO: 在此添加控件通知处理程序代码
}
void CCalculatorDlg::On32771()//返回上一步
{
	CString cs;
	GetDlgItemText(IDC_EDIT2, cs);
	if(cs=="")
		MessageBox(_T("没有上一步"));
	g_str = "";
	m_Edit1.SetWindowText(cs);
}

void CCalculatorDlg::On32780()//退出
{
	exit(0);
	// TODO: 在此添加命令处理程序代码
}

void CCalculatorDlg::OnBnClickedButton20()
{
	g_str += ".";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}

void CCalculatorDlg::OnBnClickedButton4()//Delete键
{
	int nLength = g_str.GetLength();
	if (nLength > 0)
		g_str = g_str.Left(nLength - 1);
	else g_str = "0";
	m_Edit1.SetWindowText(g_str);
	// TODO: 在此添加控件通知处理程序代码
}

